{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\mateo\\\\Documents\\\\Ensolvers\\\\to-do-app\\\\src\\\\App.js\",\n    _s = $RefreshSig$();\n\nimport Header from './components/Header';\nimport Tasks from './components/Tasks';\nimport { useState, useEffect } from 'react';\nimport Form from './components/Form';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  const [showForm, setShowForm] = useState(false);\n  const [tasks, setTasks] = useState([]);\n  useEffect(() => {\n    const getTasks = async () => {\n      const tasksFromServer = await fetchTasks();\n      setTasks(tasksFromServer);\n    };\n\n    getTasks();\n  }, []);\n\n  const fetchTasks = async () => {\n    const res = await fetch('http://localhost:5000/tasks');\n    const data = await res.json();\n    return data;\n  };\n\n  const fetchTask = async id => {\n    const res = await fetch(`http://localhost:5000/tasks/${id}`);\n    const data = await res.json();\n    return data;\n  };\n\n  const deleteTask = async id => {\n    await fetch(`http://localhost:5000/tasks/${id}`, {\n      method: 'DELETE'\n    });\n    setTasks(tasks.filter(task => task.id !== id));\n  };\n\n  const addTask = async task => {\n    const res = await fetch('http://localhost:5000/tasks', {\n      method: 'POST',\n      headers: {\n        'Content-type': 'application/json'\n      },\n      body: JSON.stringify(task)\n    });\n    const data = await res.json();\n    setTasks([...tasks, data]);\n  };\n\n  const toggleCompleted = async id => {\n    const taskToToggle = await fetchTask(id);\n    const updTask = { ...taskToToggle,\n      completed: !taskToToggle.completed\n    };\n    const res = await fetch(`http://localhost:5000/tasks/${id}`, {\n      method: 'PUT',\n      headers: {\n        'Content-type': 'application/json'\n      },\n      body: JSON.stringify(updTask)\n    });\n    const data = await res.json();\n    setTasks(tasks.map(task => task.id === id ? { ...task,\n      completed: data.completed\n    } : task));\n  };\n\n  const editTask = async id => {\n    var monthNames = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"];\n    var today = new Date();\n    const taskToEdit = await fetchTask(id);\n    const name = prompt(\"Enter a new name for the task\");\n    const date = prompt(\"Enter a new date for the task\", today.getDate() + '-' + monthNames[today.getMonth()] + \"-\" + today.getFullYear());\n    const updTask = { ...taskToEdit,\n      title: name,\n      date: date\n    };\n    const res = await fetch(`http://localhost:5000/tasks/${id}`, {\n      method: 'PUT',\n      headers: {\n        'Content-type': 'application/json'\n      },\n      body: JSON.stringify(updTask)\n    });\n    const data = await res.json();\n    setTasks(tasks.map(task => task.id === id ? { ...task,\n      title: data.title,\n      date: data.date\n    } : task));\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: [/*#__PURE__*/_jsxDEV(Header, {\n      onAdd: () => setShowForm(!showForm),\n      showForm: showForm\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 7\n    }, this), showForm && /*#__PURE__*/_jsxDEV(Form, {\n      onAdd: addTask\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 20\n    }, this), tasks.length > 0 ? /*#__PURE__*/_jsxDEV(Tasks, {\n      tasks: tasks,\n      onDelete: deleteTask,\n      onToggle: toggleCompleted,\n      onEdit: editTask\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 27\n    }, this) : 'Add a task to start!']\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 93,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"wxcOtEIOlgBKfWy3IIZoWA+CCTw=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["C:/Users/mateo/Documents/Ensolvers/to-do-app/src/App.js"],"names":["Header","Tasks","useState","useEffect","Form","App","showForm","setShowForm","tasks","setTasks","getTasks","tasksFromServer","fetchTasks","res","fetch","data","json","fetchTask","id","deleteTask","method","filter","task","addTask","headers","body","JSON","stringify","toggleCompleted","taskToToggle","updTask","completed","map","editTask","monthNames","today","Date","taskToEdit","name","prompt","date","getDate","getMonth","getFullYear","title","length"],"mappings":"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","sourcesContent":["import Header from './components/Header'\nimport Tasks from './components/Tasks'\nimport { useState, useEffect } from 'react'\nimport Form from './components/Form'\n\nfunction App() {\n\n  const [showForm, setShowForm] = useState(false)\n  const [tasks, setTasks] = useState([])\n\n  useEffect(() => {\n    const getTasks = async () => {\n      const tasksFromServer = await fetchTasks()\n      setTasks(tasksFromServer)\n    }\n\n   getTasks()\n  }, [])  \n\n  const fetchTasks = async () => {\n    const res = await fetch('http://localhost:5000/tasks')\n    const data = await res.json()\n\n    return data\n  }\n\n  const fetchTask = async (id) => {\n    const res = await fetch(`http://localhost:5000/tasks/${id}`)\n    const data = await res.json()\n\n    return data\n  }\n\n  const deleteTask = async (id) => {\n    await fetch(`http://localhost:5000/tasks/${id}`, {method: 'DELETE'})\n\n    setTasks(tasks.filter((task) => task.id !== id))\n  }\n\n  const addTask = async (task) => {\n    const res = await fetch('http://localhost:5000/tasks', {\n      method: 'POST',\n      headers: {\n        'Content-type' : 'application/json'\n      },\n      body : JSON.stringify(task)\n    })\n\n    const data = await res.json()\n\n    setTasks([...tasks, data])\n  }\n\n  const toggleCompleted = async (id) => {\n    const taskToToggle = await fetchTask(id)\n    const updTask = {...taskToToggle, completed: !taskToToggle.completed}\n    const res = await fetch(`http://localhost:5000/tasks/${id}`, {\n      method: 'PUT',\n      headers: {\n        'Content-type' : 'application/json'\n      },\n      body: JSON.stringify(updTask)\n    })\n\n    const data = await res.json()\n\n    setTasks(tasks.map((task) => task.id === id ? {...task, completed: data.completed} : task))\n  }\n\n  const editTask = async (id) => {\n    var monthNames = [ \"January\", \"February\", \"March\", \"April\", \"May\", \"June\",\n    \"July\", \"August\", \"September\", \"October\", \"November\", \"December\" ];\n    var today = new Date();\n    const taskToEdit = await fetchTask(id)\n    const name = prompt(\"Enter a new name for the task\")\n    const date = prompt(\"Enter a new date for the task\", today.getDate() + '-' + monthNames[today.getMonth()]+\"-\"+today.getFullYear())\n\n    const updTask = {...taskToEdit, title: name, date: date}\n    const res = await fetch(`http://localhost:5000/tasks/${id}`, {\n      method: 'PUT',\n      headers: {\n        'Content-type' : 'application/json'\n      },\n      body: JSON.stringify(updTask)\n    })\n\n    const data = await res.json()\n\n    setTasks(tasks.map((task) => task.id === id ? {...task, title: data.title, date: data.date} : task))\n  }\n\n  return (\n    <div className=\"container\">\n      <Header onAdd={() => setShowForm(!showForm)} showForm={showForm}/>\n      {showForm && <Form onAdd={addTask}/>}\n      {tasks.length > 0 ? <Tasks tasks={tasks} onDelete={deleteTask} onToggle={toggleCompleted} onEdit={editTask}/> : 'Add a task to start!'}\n    </div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}