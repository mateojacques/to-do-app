{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\mateo\\\\Documents\\\\Ensolvers\\\\to-do-app\\\\src\\\\App.js\",\n    _s = $RefreshSig$();\n\nimport Header from \"./components/Header\";\nimport Tasks from \"./components/Tasks\";\nimport Folders from \"./components/Folders\";\nimport { useState, useEffect } from \"react\";\nimport Form from \"./components/Form\";\nimport AltForm from \"./components/AltForm\";\nimport { Route, useLocation } from \"react-router-dom\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  const location = useLocation();\n  const [showForm, setShowForm] = useState(false);\n  const [showAltForm, setShowAltForm] = useState(false);\n  const [tasks, setTasks] = useState([]);\n  const [folders, setFolders] = useState([]); //TASK MANAGEMENT\n\n  useEffect(() => {\n    const getTasks = async () => {\n      const tasksFromServer = await fetchTasks();\n      setTasks(tasksFromServer);\n    };\n\n    getTasks();\n  }, []);\n\n  const fetchTasks = async () => {\n    const res = await fetch(\"http://localhost:5000/tasks\");\n    const data = await res.json();\n    return data;\n  };\n\n  const fetchTask = async id => {\n    const res = await fetch(`http://localhost:5000/tasks/${id}`);\n    const data = await res.json();\n    return data;\n  };\n\n  const deleteTask = async id => {\n    await fetch(`http://localhost:5000/tasks/${id}`, {\n      method: \"DELETE\"\n    });\n    setTasks(tasks.filter(task => task.id !== id));\n  };\n\n  const addTask = async task => {\n    const res = await fetch(\"http://localhost:5000/tasks\", {\n      method: \"POST\",\n      headers: {\n        \"Content-type\": \"application/json\"\n      },\n      body: JSON.stringify(task)\n    });\n    const data = await res.json();\n    setTasks([...tasks, data]);\n  };\n\n  const editTask = async id => {\n    var today = new Date();\n    const taskToEdit = await fetchTask(id);\n    const name = prompt(\"Enter a new name for the task\");\n    const date = prompt(\"Enter a new date for the task\", `${today.getFullYear()}-0${today.getMonth() + 1}-${today.getDate()}`);\n    const updTask = { ...taskToEdit,\n      title: name,\n      date: date\n    };\n    const res = await fetch(`http://localhost:5000/tasks/${id}`, {\n      method: \"PUT\",\n      headers: {\n        \"Content-type\": \"application/json\"\n      },\n      body: JSON.stringify(updTask)\n    });\n    const data = await res.json();\n    setTasks(tasks.map(task => task.id === id ? { ...task,\n      title: data.title,\n      date: data.date\n    } : task));\n  };\n\n  const toggleCompleted = async id => {\n    const taskToToggle = await fetchTask(id);\n    const updTask = { ...taskToToggle,\n      completed: !taskToToggle.completed\n    };\n    const res = await fetch(`http://localhost:5000/tasks/${id}`, {\n      method: \"PUT\",\n      headers: {\n        \"Content-type\": \"application/json\"\n      },\n      body: JSON.stringify(updTask)\n    });\n    const data = await res.json();\n    setTasks(tasks.map(task => task.id === id ? { ...task,\n      completed: data.completed\n    } : task));\n  }; //FOLDER MANAGEMENT\n\n\n  useEffect(() => {\n    const getFolders = async () => {\n      const foldersFromServer = await fetchFolders();\n      setFolders(foldersFromServer);\n    };\n\n    getFolders();\n  }, []);\n\n  const fetchFolders = async () => {\n    const res = await fetch(\"http://localhost:5000/folders\");\n    const data = await res.json();\n    return data;\n  };\n\n  const fetchFolder = async id => {\n    const res = await fetch(`http://localhost:5000/folders/${id}`);\n    const data = await res.json();\n    return data;\n  };\n\n  const addFolder = async folder => {\n    const res = await fetch(\"http://localhost:5000/folders\", {\n      method: \"POST\",\n      headers: {\n        \"Content-type\": \"application/json\"\n      },\n      body: JSON.stringify(folder)\n    });\n    const data = await res.json();\n    setFolders([...folders, data]);\n  };\n\n  const deleteFolder = async id => {\n    await fetch(`http://localhost:5000/folders/${id}`, {\n      method: \"DELETE\"\n    });\n    setFolders(folders.filter(folder => folder.id !== id));\n  };\n\n  const editFolder = async id => {\n    const folderToEdit = await fetchFolder(id);\n    const name = prompt(\"Enter a new name for the folder\");\n    const updFolder = { ...folderToEdit,\n      title: name\n    };\n    const res = await fetch(`http://localhost:5000/folders/${id}`, {\n      method: \"PUT\",\n      headers: {\n        \"Content-type\": \"application/json\"\n      },\n      body: JSON.stringify(updFolder)\n    });\n    const data = await res.json();\n    setFolders(folders.map(folder => folder.id === id ? { ...folder,\n      title: data.title\n    } : folder));\n  }; //FORM CONTROL\n\n\n  const addType = () => {\n    if (document.getElementsByTagName(\"select\").length === 0) {\n      const header = document.getElementById(\"header\");\n      var select = document.createElement(\"select\");\n      select.className = \"select\";\n      select.innerHTML = `<option value=\"task\" selected>Task</option>\n    <option value=\"folder\">Folder</option>`;\n      header.append(select);\n      select.addEventListener(\"change\", () => {\n        if (select.value === \"task\") {\n          setShowForm(!showForm);\n          setShowAltForm(showAltForm);\n        } else {\n          setShowForm(showForm);\n          setShowAltForm(!showAltForm);\n        }\n      });\n    } else {\n      select = document.querySelector(\".select\");\n    }\n\n    if (select.value === \"task\") {\n      setShowForm(!showForm);\n    } else {\n      setShowAltForm(!showAltForm);\n    }\n\n    if (showForm || showAltForm) {\n      select.style.display = \"none\";\n    } else {\n      select.style.display = \"block\";\n    }\n  };\n\n  const addForm = () => {\n    setShowForm(!showForm);\n  };\n\n  const addTaskToFolder = async (task, id) => {\n    console.log(id);\n    /*\n    const folder = await fetchFolder(1);\n    console.log(id)\n     const res = await fetch(`http://localhost:5000/tasks`, {\n      method: \"POST\",\n      headers: {\n        \"Content-type\": \"application/json\",\n      },\n      body: JSON.stringify(task),\n    });\n     const data = await res.json();\n     setTasks([...tasks, data]);\n    */\n  };\n\n  const test = async id => {\n    console.log(id);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: [/*#__PURE__*/_jsxDEV(Route, {\n      path: \"/\",\n      exact: true,\n      render: props => /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(Header, {\n          onAdd: addType,\n          showForm: showForm,\n          showAltForm: showAltForm\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 249,\n          columnNumber: 13\n        }, this), showForm && /*#__PURE__*/_jsxDEV(Form, {\n          onAdd: addTask\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 254,\n          columnNumber: 26\n        }, this), showAltForm && /*#__PURE__*/_jsxDEV(AltForm, {\n          onAdd: addFolder\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 255,\n          columnNumber: 29\n        }, this), folders.length > 0 && /*#__PURE__*/_jsxDEV(Folders, {\n          folders: folders,\n          onDelete: deleteFolder,\n          onEdit: editFolder\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 257,\n          columnNumber: 15\n        }, this), tasks.length > 0 ? /*#__PURE__*/_jsxDEV(Tasks, {\n          tasks: tasks,\n          onDelete: deleteTask,\n          onToggle: toggleCompleted,\n          onEdit: editTask\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 264,\n          columnNumber: 15\n        }, this) : \"Add a task to start!\"]\n      }, void 0, true)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 244,\n      columnNumber: 7\n    }, this), location.pathname !== \"/\" && /*#__PURE__*/_jsxDEV(Header, {\n      onAdd: addForm,\n      showForm: showForm\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 278,\n      columnNumber: 9\n    }, this), location.pathname !== \"/\" && showForm && /*#__PURE__*/_jsxDEV(Form, {\n      onAdd: addTaskToFolder\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 281,\n      columnNumber: 49\n    }, this), location.pathname !== \"/\" && /*#__PURE__*/_jsxDEV(Tasks, {\n      tasks: tasks,\n      onAdd: addTaskToFolder\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 283,\n      columnNumber: 37\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 243,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"T3Ubw4t7JRO0q7zkoB5MybK4BzA=\", false, function () {\n  return [useLocation];\n});\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["C:/Users/mateo/Documents/Ensolvers/to-do-app/src/App.js"],"names":["Header","Tasks","Folders","useState","useEffect","Form","AltForm","Route","useLocation","App","location","showForm","setShowForm","showAltForm","setShowAltForm","tasks","setTasks","folders","setFolders","getTasks","tasksFromServer","fetchTasks","res","fetch","data","json","fetchTask","id","deleteTask","method","filter","task","addTask","headers","body","JSON","stringify","editTask","today","Date","taskToEdit","name","prompt","date","getFullYear","getMonth","getDate","updTask","title","map","toggleCompleted","taskToToggle","completed","getFolders","foldersFromServer","fetchFolders","fetchFolder","addFolder","folder","deleteFolder","editFolder","folderToEdit","updFolder","addType","document","getElementsByTagName","length","header","getElementById","select","createElement","className","innerHTML","append","addEventListener","value","querySelector","style","display","addForm","addTaskToFolder","console","log","test","props","pathname"],"mappings":"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","sourcesContent":["import Header from \"./components/Header\";\nimport Tasks from \"./components/Tasks\";\nimport Folders from \"./components/Folders\";\nimport { useState, useEffect } from \"react\";\nimport Form from \"./components/Form\";\nimport AltForm from \"./components/AltForm\";\nimport { Route, useLocation } from \"react-router-dom\";\n\nfunction App() {\n  const location = useLocation();\n\n  const [showForm, setShowForm] = useState(false);\n  const [showAltForm, setShowAltForm] = useState(false);\n  const [tasks, setTasks] = useState([]);\n  const [folders, setFolders] = useState([]);\n\n  //TASK MANAGEMENT\n\n  useEffect(() => {\n    const getTasks = async () => {\n      const tasksFromServer = await fetchTasks();\n      setTasks(tasksFromServer);\n    };\n\n    getTasks();\n  }, []);\n\n  const fetchTasks = async () => {\n    const res = await fetch(\"http://localhost:5000/tasks\");\n    const data = await res.json();\n\n    return data;\n  };\n\n  const fetchTask = async (id) => {\n    const res = await fetch(`http://localhost:5000/tasks/${id}`);\n    const data = await res.json();\n\n    return data;\n  };\n\n  const deleteTask = async (id) => {\n    await fetch(`http://localhost:5000/tasks/${id}`, { method: \"DELETE\" });\n\n    setTasks(tasks.filter((task) => task.id !== id));\n  };\n\n  const addTask = async (task) => {\n    const res = await fetch(\"http://localhost:5000/tasks\", {\n      method: \"POST\",\n      headers: {\n        \"Content-type\": \"application/json\",\n      },\n      body: JSON.stringify(task),\n    });\n\n    const data = await res.json();\n\n    setTasks([...tasks, data]);\n  };\n\n  const editTask = async (id) => {\n    var today = new Date();\n    const taskToEdit = await fetchTask(id);\n    const name = prompt(\"Enter a new name for the task\");\n    const date = prompt(\n      \"Enter a new date for the task\",\n      `${today.getFullYear()}-0${today.getMonth() + 1}-${today.getDate()}`\n    );\n\n    const updTask = { ...taskToEdit, title: name, date: date };\n    const res = await fetch(`http://localhost:5000/tasks/${id}`, {\n      method: \"PUT\",\n      headers: {\n        \"Content-type\": \"application/json\",\n      },\n      body: JSON.stringify(updTask),\n    });\n\n    const data = await res.json();\n\n    setTasks(\n      tasks.map((task) =>\n        task.id === id ? { ...task, title: data.title, date: data.date } : task\n      )\n    );\n  };\n\n  const toggleCompleted = async (id) => {\n    const taskToToggle = await fetchTask(id);\n    const updTask = { ...taskToToggle, completed: !taskToToggle.completed };\n    const res = await fetch(`http://localhost:5000/tasks/${id}`, {\n      method: \"PUT\",\n      headers: {\n        \"Content-type\": \"application/json\",\n      },\n      body: JSON.stringify(updTask),\n    });\n\n    const data = await res.json();\n\n    setTasks(\n      tasks.map((task) =>\n        task.id === id ? { ...task, completed: data.completed } : task\n      )\n    );\n  };\n\n  //FOLDER MANAGEMENT\n\n  useEffect(() => {\n    const getFolders = async () => {\n      const foldersFromServer = await fetchFolders();\n      setFolders(foldersFromServer);\n    };\n\n    getFolders();\n  }, []);\n\n  const fetchFolders = async () => {\n    const res = await fetch(\"http://localhost:5000/folders\");\n    const data = await res.json();\n\n    return data;\n  };\n\n  const fetchFolder = async (id) => {\n    const res = await fetch(`http://localhost:5000/folders/${id}`);\n    const data = await res.json();\n\n    return data;\n  };\n\n  const addFolder = async (folder) => {\n    const res = await fetch(\"http://localhost:5000/folders\", {\n      method: \"POST\",\n      headers: {\n        \"Content-type\": \"application/json\",\n      },\n      body: JSON.stringify(folder),\n    });\n\n    const data = await res.json();\n\n    setFolders([...folders, data]);\n  };\n\n  const deleteFolder = async (id) => {\n    await fetch(`http://localhost:5000/folders/${id}`, { method: \"DELETE\" });\n\n    setFolders(folders.filter((folder) => folder.id !== id));\n  };\n\n  const editFolder = async (id) => {\n    const folderToEdit = await fetchFolder(id);\n    const name = prompt(\"Enter a new name for the folder\");\n    const updFolder = { ...folderToEdit, title: name };\n    const res = await fetch(`http://localhost:5000/folders/${id}`, {\n      method: \"PUT\",\n      headers: {\n        \"Content-type\": \"application/json\",\n      },\n      body: JSON.stringify(updFolder),\n    });\n\n    const data = await res.json();\n\n    setFolders(\n      folders.map((folder) =>\n        folder.id === id ? { ...folder, title: data.title } : folder\n      )\n    );\n  };\n\n  //FORM CONTROL\n\n  const addType = () => {\n    if (document.getElementsByTagName(\"select\").length === 0) {\n      const header = document.getElementById(\"header\");\n      var select = document.createElement(\"select\");\n      select.className = \"select\";\n      select.innerHTML = `<option value=\"task\" selected>Task</option>\n    <option value=\"folder\">Folder</option>`;\n      header.append(select);\n\n      select.addEventListener(\"change\", () => {\n        if (select.value === \"task\") {\n          setShowForm(!showForm);\n          setShowAltForm(showAltForm);\n        } else {\n          setShowForm(showForm);\n          setShowAltForm(!showAltForm);\n        }\n      });\n    } else {\n      select = document.querySelector(\".select\");\n    }\n\n    if (select.value === \"task\") {\n      setShowForm(!showForm);\n    } else {\n      setShowAltForm(!showAltForm);\n    }\n\n    if (showForm || showAltForm) {\n      select.style.display = \"none\";\n    } else {\n      select.style.display = \"block\";\n    }\n  };\n\n  const addForm = () => {\n    setShowForm(!showForm);\n  };\n\n  const addTaskToFolder = async (task, id) => {\n\n    console.log(id)\n\n    /*\n    const folder = await fetchFolder(1);\n    console.log(id)\n\n    const res = await fetch(`http://localhost:5000/tasks`, {\n      method: \"POST\",\n      headers: {\n        \"Content-type\": \"application/json\",\n      },\n      body: JSON.stringify(task),\n    });\n\n    const data = await res.json();\n\n    setTasks([...tasks, data]);\n    */\n  };\n\n  const test = async (id) => {\n    console.log(id)\n  }\n\n  return (\n    <div className=\"container\">\n      <Route\n        path=\"/\"\n        exact\n        render={(props) => (\n          <>\n            <Header\n              onAdd={addType}\n              showForm={showForm}\n              showAltForm={showAltForm}\n            />\n            {showForm && <Form onAdd={addTask} />}\n            {showAltForm && <AltForm onAdd={addFolder} />}\n            {folders.length > 0 && (\n              <Folders\n                folders={folders}\n                onDelete={deleteFolder}\n                onEdit={editFolder}\n              />\n            )}\n            {tasks.length > 0 ? (\n              <Tasks\n                tasks={tasks}\n                onDelete={deleteTask}\n                onToggle={toggleCompleted}\n                onEdit={editTask}\n              />\n            ) : (\n              \"Add a task to start!\"\n            )}\n          </>\n        )}\n      />\n\n      {location.pathname !== \"/\" && (\n        <Header onAdd={addForm} showForm={showForm} />\n      )}\n\n      {location.pathname !== \"/\" && showForm && <Form onAdd={addTaskToFolder}/>}\n\n      {location.pathname !== \"/\" && <Tasks tasks={tasks} onAdd={addTaskToFolder}/>}\n    </div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}