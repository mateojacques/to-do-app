{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\mateo\\\\Documents\\\\Ensolvers\\\\to-do-app\\\\src\\\\App.js\",\n    _s = $RefreshSig$();\n\nimport Header from \"./components/Header\";\nimport Tasks from \"./components/Tasks\";\nimport { useState, useEffect } from \"react\";\nimport Form from \"./components/Form\";\nimport AltForm from \"./components/AltForm\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  const [showForm, setShowForm] = useState(false);\n  const [showAltForm, setShowAltForm] = useState(false);\n  const [tasks, setTasks] = useState([]);\n  useEffect(() => {\n    const getTasks = async () => {\n      const tasksFromServer = await fetchTasks();\n      setTasks(tasksFromServer);\n    };\n\n    getTasks();\n  }, []);\n\n  const fetchTasks = async () => {\n    const res = await fetch(\"http://localhost:5000/tasks\");\n    const data = await res.json();\n    return data;\n  };\n\n  const fetchTask = async id => {\n    const res = await fetch(`http://localhost:5000/tasks/${id}`);\n    const data = await res.json();\n    return data;\n  };\n\n  const deleteTask = async id => {\n    await fetch(`http://localhost:5000/tasks/${id}`, {\n      method: \"DELETE\"\n    });\n    setTasks(tasks.filter(task => task.id !== id));\n  };\n\n  const addTask = async task => {\n    const res = await fetch(\"http://localhost:5000/tasks\", {\n      method: \"POST\",\n      headers: {\n        \"Content-type\": \"application/json\"\n      },\n      body: JSON.stringify(task)\n    });\n    const data = await res.json();\n    setTasks([...tasks, data]);\n  };\n\n  const toggleCompleted = async id => {\n    const taskToToggle = await fetchTask(id);\n    const updTask = { ...taskToToggle,\n      completed: !taskToToggle.completed\n    };\n    const res = await fetch(`http://localhost:5000/tasks/${id}`, {\n      method: \"PUT\",\n      headers: {\n        \"Content-type\": \"application/json\"\n      },\n      body: JSON.stringify(updTask)\n    });\n    const data = await res.json();\n    setTasks(tasks.map(task => task.id === id ? { ...task,\n      completed: data.completed\n    } : task));\n  };\n\n  const editTask = async id => {\n    var today = new Date();\n    const taskToEdit = await fetchTask(id);\n    const name = prompt(\"Enter a new name for the task\");\n    const date = prompt(\"Enter a new date for the task\", `${today.getFullYear()}-0${today.getMonth()}-${today.getDate()}`);\n    const updTask = { ...taskToEdit,\n      title: name,\n      date: date\n    };\n    const res = await fetch(`http://localhost:5000/tasks/${id}`, {\n      method: \"PUT\",\n      headers: {\n        \"Content-type\": \"application/json\"\n      },\n      body: JSON.stringify(updTask)\n    });\n    const data = await res.json();\n    setTasks(tasks.map(task => task.id === id ? { ...task,\n      title: data.title,\n      date: data.date\n    } : task));\n  };\n\n  const addType = () => {\n    if (document.getElementsByTagName(\"select\").length === 0) {\n      const header = document.getElementById(\"header\");\n      var select = document.createElement(\"select\");\n      select.className = \"select\";\n      select.innerHTML = `<option value=\"task\" selected>Task</option>\n    <option value=\"folder\">Folder</option>`;\n      header.append(select);\n      select.addEventListener(\"change\", () => {\n        if (select.value === 'task') {\n          setShowForm(!showForm);\n          setShowAltForm(showAltForm);\n        } else {\n          setShowForm(showForm);\n          setShowAltForm(!showAltForm);\n        }\n      });\n    } else {\n      var select = document.querySelector(\".select\");\n    }\n\n    if (select.style.display != 'none') {\n      setShowAltForm(!showAltForm);\n    }\n\n    if (showAltForm) {\n      setShowAltForm(!showAltForm);\n    }\n\n    if (showForm) {\n      select.style.display = 'none';\n    } else {\n      select.style.display = 'block';\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: [/*#__PURE__*/_jsxDEV(Header, {\n      onAdd: addType,\n      showForm: showForm,\n      showAltForm: showAltForm\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 7\n    }, this), showForm && /*#__PURE__*/_jsxDEV(Form, {\n      onAdd: addTask\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 20\n    }, this), showAltForm && /*#__PURE__*/_jsxDEV(AltForm, {\n      onAdd: addTask\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 23\n    }, this), tasks.length > 0 ? /*#__PURE__*/_jsxDEV(Tasks, {\n      tasks: tasks,\n      onDelete: deleteTask,\n      onToggle: toggleCompleted,\n      onEdit: editTask\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 147,\n      columnNumber: 9\n    }, this) : \"Add a task to start!\"]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 142,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"g44aPi2zN3Xv7GsaYlNskRIq2Xo=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["C:/Users/mateo/Documents/Ensolvers/to-do-app/src/App.js"],"names":["Header","Tasks","useState","useEffect","Form","AltForm","App","showForm","setShowForm","showAltForm","setShowAltForm","tasks","setTasks","getTasks","tasksFromServer","fetchTasks","res","fetch","data","json","fetchTask","id","deleteTask","method","filter","task","addTask","headers","body","JSON","stringify","toggleCompleted","taskToToggle","updTask","completed","map","editTask","today","Date","taskToEdit","name","prompt","date","getFullYear","getMonth","getDate","title","addType","document","getElementsByTagName","length","header","getElementById","select","createElement","className","innerHTML","append","addEventListener","value","querySelector","style","display"],"mappings":"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","sourcesContent":["import Header from \"./components/Header\";\nimport Tasks from \"./components/Tasks\";\nimport { useState, useEffect } from \"react\";\nimport Form from \"./components/Form\";\nimport AltForm from \"./components/AltForm\"\n\nfunction App() {\n  const [showForm, setShowForm] = useState(false)\n  const [showAltForm, setShowAltForm] = useState(false)\n  const [tasks, setTasks] = useState([])\n\n  useEffect(() => {\n    const getTasks = async () => {\n      const tasksFromServer = await fetchTasks()\n      setTasks(tasksFromServer)\n    }\n\n    getTasks()\n  }, [])\n\n  const fetchTasks = async () => {\n    const res = await fetch(\"http://localhost:5000/tasks\");\n    const data = await res.json();\n\n    return data;\n  };\n\n  const fetchTask = async (id) => {\n    const res = await fetch(`http://localhost:5000/tasks/${id}`);\n    const data = await res.json();\n\n    return data;\n  };\n\n  const deleteTask = async (id) => {\n    await fetch(`http://localhost:5000/tasks/${id}`, { method: \"DELETE\" });\n\n    setTasks(tasks.filter((task) => task.id !== id));\n  };\n\n  const addTask = async (task) => {\n    const res = await fetch(\"http://localhost:5000/tasks\", {\n      method: \"POST\",\n      headers: {\n        \"Content-type\": \"application/json\",\n      },\n      body: JSON.stringify(task),\n    });\n\n    const data = await res.json();\n\n    setTasks([...tasks, data]);\n  };\n\n  const toggleCompleted = async (id) => {\n    const taskToToggle = await fetchTask(id);\n    const updTask = { ...taskToToggle, completed: !taskToToggle.completed };\n    const res = await fetch(`http://localhost:5000/tasks/${id}`, {\n      method: \"PUT\",\n      headers: {\n        \"Content-type\": \"application/json\",\n      },\n      body: JSON.stringify(updTask),\n    });\n\n    const data = await res.json();\n\n    setTasks(\n      tasks.map((task) =>\n        task.id === id ? { ...task, completed: data.completed } : task\n      )\n    );\n  };\n\n  const editTask = async (id) => {\n    var today = new Date();\n    const taskToEdit = await fetchTask(id);\n    const name = prompt(\"Enter a new name for the task\");\n    const date = prompt(\n      \"Enter a new date for the task\",\n      `${today.getFullYear()}-0${today.getMonth()}-${today.getDate()}`\n    );\n\n    const updTask = { ...taskToEdit, title: name, date: date };\n    const res = await fetch(`http://localhost:5000/tasks/${id}`, {\n      method: \"PUT\",\n      headers: {\n        \"Content-type\": \"application/json\",\n      },\n      body: JSON.stringify(updTask),\n    });\n\n    const data = await res.json();\n\n    setTasks(\n      tasks.map((task) =>\n        task.id === id ? { ...task, title: data.title, date: data.date } : task\n      )\n    );\n  };\n\n  const addType = () => {\n    if (document.getElementsByTagName(\"select\").length === 0){\n    const header = document.getElementById(\"header\")\n    var select = document.createElement(\"select\")\n    select.className=\"select\"\n    select.innerHTML = `<option value=\"task\" selected>Task</option>\n    <option value=\"folder\">Folder</option>`\n    header.append(select)\n\n    select.addEventListener(\"change\", () => {\n      if (select.value === 'task') {\n        setShowForm(!showForm);\n        setShowAltForm(showAltForm)\n      } else{\n        setShowForm(showForm);\n        setShowAltForm(!showAltForm)\n      }\n    })} else{\n      var select = document.querySelector(\".select\")\n    }\n\n    if(select.style.display != 'none'){\n      setShowAltForm(!showAltForm)\n    }\n\n    \n\n    if(showAltForm){\n      setShowAltForm(!showAltForm)\n    }\n\n    if (showForm){\n      select.style.display = 'none'\n    } else{\n      select.style.display = 'block'\n    }\n  };\n\n\n  return (\n    <div className=\"container\">\n      <Header onAdd={addType} showForm={showForm} showAltForm={showAltForm} />\n      {showForm && <Form onAdd={addTask} />}\n      {showAltForm && <AltForm onAdd={addTask}/>}\n      {tasks.length > 0 ? (\n        <Tasks\n          tasks={tasks}\n          onDelete={deleteTask}\n          onToggle={toggleCompleted}\n          onEdit={editTask}\n        />\n      ) : (\n        \"Add a task to start!\"\n      )}\n    </div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}