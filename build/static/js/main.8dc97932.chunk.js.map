{"version":3,"sources":["components/Add.js","components/Header.js","components/Task.js","components/Tasks.js","components/Folder.js","components/Folders.js","components/Form.js","components/AltForm.js","App.js","reportWebVitals.js","index.js"],"names":["Add","color","value","onClick","style","tabIndex","id","Header","onAdd","showForm","showAltForm","to","className","Task","task","onDelete","onToggle","onEdit","completed","onDoubleClick","onTouchStart","title","date","Tasks","tasks","map","Folder","folder","Folders","folders","Form","useState","setTitle","setDate","setCompleted","onSubmit","e","preventDefault","alert","type","placeholder","onChange","target","AltForm","setTasks","App","location","useLocation","setShowForm","setShowAltForm","setFolders","useEffect","a","fetchTasks","tasksFromServer","getTasks","fetch","res","json","data","fetchTask","deleteTask","method","filter","addTask","headers","body","JSON","stringify","editTask","today","Date","taskToEdit","name","prompt","getFullYear","getMonth","getDate","updTask","toggleCompleted","taskToToggle","fetchFolders","foldersFromServer","getFolders","fetchFolder","addFolder","deleteFolder","editFolder","folderToEdit","updFolder","addType","document","getElementsByTagName","length","header","getElementById","select","createElement","innerHTML","append","addEventListener","querySelector","display","path","exact","render","props","pathname","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode"],"mappings":"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","file":"static/js/main.8dc97932.chunk.js","sourcesContent":["const Add = ({color, value, onClick}) => {\r\n    return <button style={{color: color}} onClick={onClick} tabIndex=\"-1\" id=\"add-btn\">{value}</button>\r\n}\r\n\r\nexport default Add\r\n","import Add from './Add.js'\r\nimport {Link} from 'react-router-dom'\r\n\r\nconst Header = ({onAdd, showForm, showAltForm}) => {\r\n    return (\r\n        <header id=\"header\">\r\n            <Link to=\"/\" className=\"title\">To-do App</Link>\r\n            <Add color={showForm || showAltForm ? \"#D63230\" : '#1C77C3'} value={showForm || showAltForm ? <i className=\"fas fa-minus-circle\"></i> : <i className=\"fas fa-plus-circle\"></i>} onClick={onAdd}/>\r\n        </header>\r\n    )\r\n}\r\n\r\nexport default Header\r\n","const Task = ({ task, onDelete, onToggle, onEdit}) => {\r\n  return (\r\n    <div\r\n      className={`task ${task.completed ? \"completed\" : \"\"}`}\r\n      onDoubleClick={() => onToggle(task.id)}\r\n      onTouchStart={() => onToggle(task.id)}\r\n    >\r\n      <div className=\"task-info\">\r\n        <h3 className=\"task-title\">{task.title}</h3>\r\n        <p className=\"task-desc\">{task.date}</p>\r\n      </div>\r\n      <div className=\"task-options\">\r\n      <button className=\"edit-btn\" onClick={() => onEdit(task.id)}>\r\n          <i className=\"fas fa-edit\"></i>\r\n        </button>\r\n        <button className=\"remove-btn\" onClick={() => onDelete(task.id)}>\r\n          <i className=\"fas fa-times\"></i>\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Task;\r\n","import Task from \"./Task\"\r\n\r\n\r\nconst Tasks = ({tasks, onDelete, onToggle, onEdit}) => {\r\n\r\n  return (\r\n    <section id=\"tasks\">\r\n      {tasks.map((task) => (\r\n        <Task key={task.id} task={task} onDelete={onDelete} onToggle={onToggle} onEdit={onEdit}/>\r\n      ))}\r\n    </section>\r\n  );\r\n};\r\n\r\nexport default Tasks;\r\n","import { Link } from \"react-router-dom\";\r\n\r\nconst Folder = ({ folder, onDelete, onEdit}) => {\r\n  return (\r\n    <div className=\"folder\">\r\n      <Link to={`/${folder.title}`} className=\"folder-title\">\r\n        {folder.title}\r\n      </Link>\r\n      <div className=\"folder-options\">\r\n        <button className=\"edit-btn\" onClick={() => onEdit(folder.id)}>\r\n          <i className=\"fas fa-edit\"></i>\r\n        </button>\r\n        <button className=\"remove-btn\" onClick={() => onDelete(folder.id)}>\r\n          <i className=\"fas fa-times\"></i>\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Folder;\r\n","import Folder from \"./Folder\"\r\n\r\n\r\nconst Folders = ({folders, onDelete, onEdit}) => {\r\n  return (\r\n    <section id=\"folders\">\r\n      {folders.map((folder) => (\r\n        <Folder key={folder.id} folder={folder} onDelete={onDelete} onEdit={onEdit}/>\r\n      ))}\r\n    </section>\r\n  );\r\n};\r\n\r\nexport default Folders;\r\n","import {useState} from 'react'\r\n\r\nconst Form = ({onAdd}) => {\r\n    const [title, setTitle] = useState('')\r\n    const [date, setDate] = useState('')\r\n    const [completed, setCompleted] = useState(false)\r\n\r\n    const onSubmit = (e) => {\r\n        e.preventDefault()\r\n\r\n        if(!title || !date){\r\n            alert('Please complete the fields')\r\n            return\r\n        }\r\n\r\n        onAdd({title, date, completed})\r\n\r\n        setTitle('')\r\n        setDate('')\r\n        setCompleted(false)\r\n    }\r\n\r\n    return (\r\n            <form id=\"form\" onSubmit={onSubmit}>\r\n                <div>\r\n                <div className=\"form-control\">\r\n                    <label>Task</label>\r\n                    <input type=\"text\" placeholder=\"Task name\" value={title} onChange={(e) => setTitle(e.target.value)}/>\r\n                </div>\r\n\r\n                <div className=\"form-control\">\r\n                    <label>Date</label>\r\n                    <input type=\"date\" value={date} onChange={(e) => setDate(e.target.value)}/>\r\n                </div>\r\n                </div>\r\n\r\n                <input type=\"submit\" value=\"Add task\" className=\"submit\"/>\r\n            </form>\r\n    )\r\n}\r\n\r\nexport default Form\r\n","import {useState} from 'react'\r\n\r\nconst AltForm = ({onAdd}) => {\r\n    const [title, setTitle] = useState('')\r\n    const [tasks, setTasks] = useState([])\r\n\r\n    const onSubmit = (e) => {\r\n        e.preventDefault()\r\n\r\n        if(!title){\r\n            alert('Please complete the fields')\r\n            return\r\n        }\r\n\r\n        onAdd({title, tasks})\r\n\r\n        setTitle('')\r\n        setTasks([])\r\n    }\r\n\r\n    return (\r\n            <form id=\"form\" onSubmit={onSubmit}>\r\n                <div>\r\n                <div className=\"form-control\">\r\n                    <label>Folder</label>\r\n                    <input type=\"text\" placeholder=\"Folder name\" value={title} onChange={(e) => setTitle(e.target.value)}/>\r\n                </div>\r\n                </div>\r\n\r\n                <input type=\"submit\" value=\"Add folder\" className=\"submit\"/>\r\n            </form>\r\n    )\r\n}\r\n\r\nexport default AltForm\r\n","import Header from \"./components/Header\";\nimport Tasks from \"./components/Tasks\";\nimport Folders from \"./components/Folders\";\nimport { useState, useEffect } from \"react\";\nimport Form from \"./components/Form\";\nimport AltForm from \"./components/AltForm\";\nimport { Route, useLocation } from \"react-router-dom\";\n\nfunction App() {\n  const location = useLocation();\n\n  const [showForm, setShowForm] = useState(false);\n  const [showAltForm, setShowAltForm] = useState(false);\n  const [tasks, setTasks] = useState([]);\n  const [folders, setFolders] = useState([]);\n\n  //TASK MANAGEMENT\n\n  useEffect(() => {\n    const getTasks = async () => {\n      const tasksFromServer = await fetchTasks();\n      setTasks(tasksFromServer);\n    };\n\n    getTasks();\n  }, []);\n\n  const fetchTasks = async () => {\n    const res = await fetch(\"http://localhost:5000/tasks\");\n    const data = await res.json();\n\n    return data;\n  };\n\n  const fetchTask = async (id) => {\n    const res = await fetch(`http://localhost:5000/tasks/${id}`);\n    const data = await res.json();\n\n    return data;\n  };\n\n  const deleteTask = async (id) => {\n    await fetch(`http://localhost:5000/tasks/${id}`, { method: \"DELETE\" });\n\n    setTasks(tasks.filter((task) => task.id !== id));\n  };\n\n  const addTask = async (task) => {\n    const res = await fetch(\"http://localhost:5000/tasks\", {\n      method: \"POST\",\n      headers: {\n        \"Content-type\": \"application/json\",\n      },\n      body: JSON.stringify(task),\n    });\n\n    const data = await res.json();\n\n    setTasks([...tasks, data]);\n  };\n\n  const editTask = async (id) => {\n    var today = new Date();\n    const taskToEdit = await fetchTask(id);\n    const name = prompt(\"Enter a new name for the task\");\n    const date = prompt(\n      \"Enter a new date for the task\",\n      `${today.getFullYear()}-0${today.getMonth() + 1}-${today.getDate()}`\n    );\n\n    const updTask = { ...taskToEdit, title: name, date: date };\n    const res = await fetch(`http://localhost:5000/tasks/${id}`, {\n      method: \"PUT\",\n      headers: {\n        \"Content-type\": \"application/json\",\n      },\n      body: JSON.stringify(updTask),\n    });\n\n    const data = await res.json();\n\n    setTasks(\n      tasks.map((task) =>\n        task.id === id ? { ...task, title: data.title, date: data.date } : task\n      )\n    );\n  };\n\n  const toggleCompleted = async (id) => {\n    const taskToToggle = await fetchTask(id);\n    const updTask = { ...taskToToggle, completed: !taskToToggle.completed };\n    const res = await fetch(`http://localhost:5000/tasks/${id}`, {\n      method: \"PUT\",\n      headers: {\n        \"Content-type\": \"application/json\",\n      },\n      body: JSON.stringify(updTask),\n    });\n\n    const data = await res.json();\n\n    setTasks(\n      tasks.map((task) =>\n        task.id === id ? { ...task, completed: data.completed } : task\n      )\n    );\n  };\n\n  //FOLDER MANAGEMENT\n\n  useEffect(() => {\n    const getFolders = async () => {\n      const foldersFromServer = await fetchFolders();\n      setFolders(foldersFromServer);\n    };\n\n    getFolders();\n  }, []);\n\n  const fetchFolders = async () => {\n    const res = await fetch(\"http://localhost:5000/folders\");\n    const data = await res.json();\n\n    return data;\n  };\n\n  const fetchFolder = async (id) => {\n    const res = await fetch(`http://localhost:5000/folders/${id}`);\n    const data = await res.json();\n\n    return data;\n  };\n\n  const addFolder = async (folder) => {\n    const res = await fetch(\"http://localhost:5000/folders\", {\n      method: \"POST\",\n      headers: {\n        \"Content-type\": \"application/json\",\n      },\n      body: JSON.stringify(folder),\n    });\n\n    const data = await res.json();\n\n    setFolders([...folders, data]);\n  };\n\n  const deleteFolder = async (id) => {\n    await fetch(`http://localhost:5000/folders/${id}`, { method: \"DELETE\" });\n\n    setFolders(folders.filter((folder) => folder.id !== id));\n  };\n\n  const editFolder = async (id) => {\n    const folderToEdit = await fetchFolder(id);\n    const name = prompt(\"Enter a new name for the folder\");\n    const updFolder = { ...folderToEdit, title: name };\n    const res = await fetch(`http://localhost:5000/folders/${id}`, {\n      method: \"PUT\",\n      headers: {\n        \"Content-type\": \"application/json\",\n      },\n      body: JSON.stringify(updFolder),\n    });\n\n    const data = await res.json();\n\n    setFolders(\n      folders.map((folder) =>\n        folder.id === id ? { ...folder, title: data.title } : folder\n      )\n    );\n  };\n\n  //FORM CONTROL\n\n  const addType = () => {\n    if (document.getElementsByTagName(\"select\").length === 0) {\n      const header = document.getElementById(\"header\");\n      var select = document.createElement(\"select\");\n      select.className = \"select\";\n      select.innerHTML = `<option value=\"task\" selected>Task</option>\n    <option value=\"folder\">Folder</option>`;\n      header.append(select);\n\n      select.addEventListener(\"change\", () => {\n        if (select.value === \"task\") {\n          setShowForm(!showForm);\n          setShowAltForm(showAltForm);\n        } else {\n          setShowForm(showForm);\n          setShowAltForm(!showAltForm);\n        }\n      });\n    } else {\n      select = document.querySelector(\".select\");\n    }\n\n    if (select.value === \"task\") {\n      setShowForm(!showForm);\n    } else {\n      setShowAltForm(!showAltForm);\n    }\n\n    if (showForm || showAltForm) {\n      select.style.display = \"none\";\n    } else {\n      select.style.display = \"block\";\n    }\n  };\n\n  const addForm = () => {\n    setShowForm(!showForm);\n  };\n\n  return (\n    <div className=\"container\">\n      <Route\n        path=\"/\"\n        exact\n        render={(props) => (\n          <>\n            <Header\n              onAdd={addType}\n              showForm={showForm}\n              showAltForm={showAltForm}\n            />\n            {showForm && <Form onAdd={addTask} />}\n            {showAltForm && <AltForm onAdd={addFolder} />}\n            {folders.length > 0 && (\n              <Folders\n                folders={folders}\n                onDelete={deleteFolder}\n                onEdit={editFolder}\n              />\n            )}\n            {tasks.length > 0 ? (\n              <Tasks\n                tasks={tasks}\n                onDelete={deleteTask}\n                onToggle={toggleCompleted}\n                onEdit={editTask}\n              />\n            ) : (\n              \"Add a task to start!\"\n            )}\n          </>\n        )}\n      />\n\n      {location.pathname !== \"/\" && (\n        <Header onAdd={addForm} showForm={showForm} />\n      )}\n\n      {location.pathname !== \"/\" && showForm && <Form onAdd={addTask} />}\n\n      {location.pathname !== \"/\" && (\n        <Tasks\n          tasks={tasks}\n          onDelete={deleteTask}\n          onToggle={toggleCompleted}\n          onEdit={editTask}\n        />\n      )}\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { BrowserRouter as Router } from 'react-router-dom'\n\nReactDOM.render(\n  <React.StrictMode>\n    <Router><App /></Router>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}